#!/bin/bash

###
# Description: Run Puppet and then start/enable as a service
#              Expects that puppet agent is already installed and configured.
#              See also: postscripts/puppet_configure (in this repo)
# Usage:
#      1. updatenode <noderange> -P "puppet_run [OPTS] [ENV_NAME]"
#
# Note: ENV_NAME will be ignored by puppet master when using ENC
#
# Source: https://github.com/ncsa/xcat-tools
###


# PREP
PRG=$( basename $0 )
logger -t xcat -p local4.info "running '$PRG' on node $NODE"


# DEFAULT SETTINGS
declare -A DEFAULTS
DEFAULTS[NUM_RUNS]=1
DEFAULTS[PAUSE_SECS]=5
DEFAULTS[RETRIES]=10
DEFAULTS[BACKOFF_INTERVAL]=60

# GLOBAL SETTINGS
PUPPET=/opt/puppetlabs/bin/puppet
AGENTLOG=/var/log/xcat/puppet_agent.log


# FUNCTIONS
logr() {
  logger -t xcat -p local4.info "$*"
  echo "$*"
}


croak() {
  logr "ERROR - $*"
  echo "ERROR - $*"
  exit 99
}


puppet_agent_runonce() {
    local _e=$1
    local _env
    [[ -n "$_e" ]] && _env="--environment $_e"
    local _logdir=$( dirname $AGENTLOG )
    mkdir -p $_logdir

    local _retry_count=0
    while true; do
        echo >> $AGENTLOG
        date >> $AGENTLOG
        echo "About to run puppet agent in '$_e' environment" >> $AGENTLOG
        set -x
        date
        $PUPPET agent --test --logdest $AGENTLOG $_env
        local _puppet_exit_code=$?
        set +x

        # Exit code 0 : Agent ran ok and made no changes
        # Exit code 2 : Agent ran ok and did make changes
        if [[ $_puppet_exit_code -eq 0 ]] || [[ $_puppet_exit_code -eq 2 ]]; then
            break
        fi

        # If we make it here the puppet run failed
        if [[ $_retry_count -eq $RETRIES ]]; then
            puppet_agent_enable
            croak "$(date) : Puppet agent failed after ${RETRIES} tries, giving up"
        fi

        let "_retry_count++"
        logr "Puppet run failed, will retry in ${BACKOFF_INTERVAL} seconds (Retry $_retry_count of $RETRIES)"
        sleep ${BACKOFF_INTERVAL}
    done
}


puppet_agent_enable() {
    logr "Enabling puppet agent service"
    $PUPPET resource service puppet ensure=running enable=true
    logr "Enabling puppet agent service ... OK"
}

print_usage() {
    cat <<ENDHERE
Usage:
    puppet_run [OPTIONS] [ENV_NAME]

OPTIONS:
    -h | --help
        Print usage message and exit
    -n | --num_runs <N>
        Run agent N times before exiting
    -p | --pause_secs <N>
        Pause N seconds between multiple agent runs
    -r | --retries <N>
        Number of times to retry a puppet agent run if it fails
    -b | --backoff_interval <N>
        Number of seconds to wait between puppet agent retries when previous run fails
        
Note: ENV_NAME will be ignored by puppet master when using ENC
ENDHERE
}


# DO WORK
NUM_RUNS=${DEFAULTS[NUM_RUNS]}
PAUSE_SECS=${DEFAULTS[PAUSE_SECS]}
RETRIES=${DEFAULTS[RETRIES]}
BACKOFF_INTERVAL=${DEFAULTS[BACKOFF_INTERVAL]}
ENDWHILE=0
while [[ $# -gt 0 ]] && [[ $ENDWHILE -eq 0 ]] ; do
  case $1 in
    -h|--help)
        print_usage
        exit 0
        ;;
    -n|--num_runs)
        NUM_RUNS="$2"
        shift
        ;;
    -p|--pause_secs)
        PAUSE_SECS="$2"
        shift
        ;;
    -r|--retries)
        RETRIES="$2"
        shift
        ;;
    -b|--backoff_interval)
        BACKOFF_INTERVAL="$2"
        shift
        ;;
    --)
        ENDWHILE=1
        ;;
    -*)
        croak "Invalid option '$1'"
        ;;
     *)
        ENDWHILE=1
        break
        ;;
  esac
  shift
done

# Allow for custom environment to be specified on cmdline
# (this won't do anything if using ENC at your site)
[[ $# -gt 0 ]] && {
    REQUESTED_ENV="$1"
    shift
}

for i in $(seq $NUM_RUNS) ; do
    logr "Starting puppet agent run # $i"
    puppet_agent_runonce $REQUESTED_ENV
    logr "End of puppet agent run # $i"
    [[ $i -lt $NUM_RUNS ]] && sleep $PAUSE_SECS
done

puppet_agent_enable

logr "end of puppet_run on OS '$OSVER' on node '$NODE'"

exit 0
